#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Select source branch"
        required: false
        default: "immortalwrt"
        type: choice
        options:
          - openwrt
          - lede
          - immortalwrt
          - Lienol
        
env:
  FEEDS_CONF: configs/${{ inputs.source_branch }}/feeds.conf.default
  CONFIGS: configs/${{ inputs.source_branch }}/.config
  FILES: configs/${{ inputs.source_branch }}/files
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_RELEASE: true
  PACKAGE_SOC: s905d
  KERNEL_VERSION: 6.1.y_5.15.y
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo docker image prune --all --force
        sudo -E apt-get -y update
        sudo -E apt-get -y install dos2unix
        sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir

    - name: Clone source code
      id: codes
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        if [[ "${{ inputs.source_branch }}" == *"openwrt"* ]]; then
            REPO_URL="https://github.com/openwrt/openwrt"
            REPO_BRANCH="openwrt-23.05"
            TAGS_NAME="official"
        elif [[ "${{ inputs.source_branch }}" == *"lede"* ]]; then
            REPO_URL="https://github.com/coolsnowwolf/lede"
            REPO_BRANCH="master"
            TAGS_NAME="lede"
        elif [[ "${{ inputs.source_branch }}" == *"immortalwrt"* ]]; then
            REPO_URL="https://github.com/immortalwrt/immortalwrt"
            REPO_BRANCH="openwrt-23.05"
            TAGS_NAME="immortalwrt"
        elif [[ "${{ inputs.source_branch }}" == *"Lienol"* ]]; then
            REPO_URL="https://github.com/Lienol/openwrt"
            REPO_BRANCH="23.05"
            TAGS_NAME="Lienol"
        else
            echo "Unknown source code repository."
            exit 1
        fi
        git clone $REPO_URL --depth=1 --branch=$REPO_BRANCH openwrt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
        echo "build_tag=OpenWrt_${TAGS_NAME}_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}
        echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"

    - name: Cache
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt
    
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        dos2unix $DIY_P1_SH && chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e $FILES ] && mv $FILES openwrt/files
        [ -e $CONFIGS ] && mv $CONFIGS openwrt/.config
        dos2unix $DIY_P2_SH && chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the OpenWrt
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        df -hT
        echo "status=success" >> ${GITHUB_OUTPUT}
        
    - name: Clear server space
      id: clean
      if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
      run: |
        cd openwrt
        mkdir output
        cp -f bin/targets/*/*/*rootfs.tar.gz output/
        cp -f .config output/config
        rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null
        cd output
        for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Upload OpenWrt to Release
      uses: ncipollo/release-action@main
      if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
      with:
        tag: ${{ steps.codes.outputs.build_tag }}
        artifacts: openwrt/output/*
        allowUpdates: true
        removeArtifacts: false
        replacesArtifacts: true
        token: ${{ secrets.PAT }}

    - name: Packaging OpenWrt
      uses: ophub/amlogic-s9xxx-openwrt@main
      if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
      with:
        openwrt_path: openwrt/output/*rootfs.tar.gz
        openwrt_board: ${{ env.PACKAGE_SOC }}
        openwrt_kernel: ${{ env.KERNEL_VERSION }}
      
    - name: Upload Packaged OpenWrt
      uses: actions/upload-artifact@main
      if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ env.PACKAGE_SOC }}_${{ env.KERNEL_VERSION }}_$(date +"%Y.%m")
        path: ${PWD}/out

###docker-uploader
    - name: Generate Source
      if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
      id: generate
      run: |
        cd openwrt/output
        cp *rootfs.tar.gz $GITHUB_WORKSPACE/docker
        echo "status=success" >> $GITHUB_OUTPUT
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and Push Docker
      if: ${{ steps.generate.outputs.status }} == 'success' && !cancelled()
      uses: docker/build-push-action@master
      with:
        platforms: linux/arm64
        file: Dockerfile
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/openwrt:latest


    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
