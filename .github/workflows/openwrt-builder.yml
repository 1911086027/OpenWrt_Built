#============================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description: Build OpenWrt
#============================================================================================

name: OpenWrt Builder

on:
  workflow_call:
    inputs:
      source_branch:
        required: true
        type: string
      openwrt_board: 
        required: true
        type: string
      openwrt_kernel:
        required: true
        type: string
      docker_img:
        required: true
        type: string
    secrets:
      TOKEN:
        required: true
      USERNAME: 
        required: true
      PASSWORD: 
        required: true

env:
  FEEDS_CONF: configs/${{ inputs.source_branch }}/feeds.conf.default
  CONFIGS: configs/${{ inputs.source_branch }}/.config
  FILES: configs/files
  DIY_P1_SH: configs/diy-part1.sh
  DIY_P2_SH: configs/diy-part2.sh
  MAKE_DOCKER_SH: docker/make_docker_image.sh
  DOCKER_OUTPATH: out
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q) 2>/dev/null
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        sudo -E apt-get -y update
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
        sudo -E apt-get -y install dos2unix
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y full-upgrade
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        sudo rm -rf ~/{.cargo,.dotnet,.rustup}
        sudo timedatectl set-timezone "${TZ}"

    - name: Create simulated physical disk
      run: |
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "${mnt_size}"G /mnt/mnt.img
        sudo truncate -s "${root_size}"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner
        sudo mkdir -p /builder
        sudo mount /dev/github/runner /builder
        sudo chown -R runner.runner /builder
  
    - name: Clone source code [ ${{ inputs.source_branch }} ]
      id: codes
      working-directory: /builder
      run: |
        df -hT $PWD
        if [[ "${{ inputs.source_branch }}" == *"official"* ]]; then
            REPO_URL="https://github.com/openwrt/openwrt"
            REPO_BRANCH="main"
            TAGS_NAME="official"
        elif [[ "${{ inputs.source_branch }}" == *"lede"* ]]; then
            REPO_URL="https://github.com/coolsnowwolf/lede"
            REPO_BRANCH="master"
            TAGS_NAME="lede"
        elif [[ "${{ inputs.source_branch }}" == *"immortalwrt"* ]]; then
            REPO_URL="https://github.com/immortalwrt/immortalwrt"
            REPO_BRANCH="master"
            TAGS_NAME="immortalwrt"
        elif [[ "${{ inputs.source_branch }}" == *"Lienol"* ]]; then
            REPO_URL="https://github.com/Lienol/openwrt"
            REPO_BRANCH="main"
            TAGS_NAME="Lienol"
        elif [[ "${{ inputs.source_branch }}" == *"personal"* ]]; then
            REPO_URL="https://github.com/immortalwrt/immortalwrt"
            REPO_BRANCH="openwrt-23.05"
            TAGS_NAME="personal"
        else
            echo "Unknown source code repository."
            exit 1
        fi
        git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
        ln -sf /builder/openwrt ${GITHUB_WORKSPACE}/openwrt
        echo "build_tag=OpenWrt_${TAGS_NAME}" >> ${GITHUB_OUTPUT}
        echo "commitHash=$(git rev-parse HEAD)" >> ${GITHUB_OUTPUT}

    - name: Cache
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: 'openwrt'
    
    - name: Load custom feeds
      run: |
        [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
        dos2unix ${DIY_P1_SH} && chmod +x ${DIY_P1_SH}
        cd openwrt
        ${GITHUB_WORKSPACE}/${DIY_P1_SH}

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [[ -e "${FILES}" ]] && mv -f ${FILES} openwrt/files
        [[ -e "${CONFIGS}" ]] && cp -f ${CONFIGS} openwrt/.config
        dos2unix ${DIY_P2_SH} && chmod +x ${DIY_P2_SH}
        cd openwrt
        ${GITHUB_WORKSPACE}/${DIY_P2_SH}

    - name: Download package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the OpenWrt
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=s || make -j1 V=s
        echo "status=success" >> ${GITHUB_OUTPUT}
        
    - name: Clear server space
      id: clean
      if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
      run: |
        df -hT
        cd openwrt
        [[ -d "output" ]] || mkdir output
        cp -f bin/targets/*/*/*{rootfs.tar.gz,rootfs.cpio.gz,bin,buildinfo} bin/targets/*/*/*{ext4,squashfs,sha256sums}* output/
        rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null
        cd output
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Upload OpenWrt to Release
      uses: ncipollo/release-action@main
      if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
      with:
        tag: ${ steps.codes.outputs.build_tag }_$(date +"%Y.%m.%d")
        artifacts: openwrt/output/*
        allowUpdates: true
        removeArtifacts: true
        token: ${{ secrets.TOKEN }}

    - name: Packaging OpenWrt
      uses: ophub/amlogic-s9xxx-openwrt@main
      if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
      with:
        openwrt_path: openwrt/output/*rootfs.tar.gz
        openwrt_board: ${{ inputs.openwrt_board }}
        openwrt_kernel: ${{ inputs.openwrt_kernel }}
      
    - name: Upload the packaged OpenWrt
      uses: ncipollo/release-action@main
      if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
      with:
        tag: ${ steps.codes.outputs.build_tag }_$(date +"%Y.%m.%d")
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        allowUpdates: true
        token: ${{ secrets.TOKEN }}

###docker-uploader
    - name: Build the Docker image
      if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
      id: docker
      run: |
        chmod +x ${MAKE_DOCKER_SH}
        ${MAKE_DOCKER_SH}
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}

    - name: Push to Docker Hub
      if: ${{ steps.docker.outputs.status }} == 'success' && !cancelled()
      uses: docker/build-push-action@v5
      with:
        push: true
        platforms: linux/arm64
        context: ${{ env.DOCKER_OUTPATH }}
        tags: "${{ inputs.docker_img }}"

    - name: Save New Commit Hash
      run: |
        echo ${{ steps.codes.outputs.commitHash }} | tee .commitHash_${{ steps.codes.outputs.build_tag }}

    - name: Delete releases and workflows runs
      uses: ophub/delete-releases-workflows@main
      with:
        delete_releases: true
        releases_keep_latest: 5
        delete_workflows: true
        workflows_keep_day: 1
        out_log: true
        gh_token: ${{ secrets.TOKEN }}

